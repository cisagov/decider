name: decider
services:
    web:
        restart: unless-stopped
        container_name: decider-web
        env_file: .env
        depends_on:
            db:
                condition: service_healthy
        build:
            context: .
            dockerfile: ./docker/web/Dockerfile
        ports:
            - '${WEB_IP}:${WEB_PORT}:5000'
        environment:
            # decider config
            KIOSK_MODE: 'yes'
            # db to [connect to, build]
            DB_HOSTNAME: ${DB_HOSTNAME}
            DB_PORT: ${DB_PORT}
            DB_DATABASE: ${DB_DATABASE}
            # db admin user [for building db]
            DB_ADMIN_NAME: ${DB_ADMIN_NAME}
            DB_ADMIN_PASS: ${DB_ADMIN_PASS}
            # db kiosk user [run app under]
            DB_KIOSK_NAME: ${DB_KIOSK_NAME}
            DB_KIOSK_PASS: ${DB_KIOSK_PASS}
            # default app admin [create]
            APP_ADMIN_EMAIL: ${APP_ADMIN_EMAIL}
            APP_ADMIN_PASS: ${APP_ADMIN_PASS}
            # cart encryption key
            CART_ENC_KEY: ${CART_ENC_KEY}
        volumes:
            - type: bind
              source: ./config
              target: /opt/decider/ro_config
              read_only: true
    db:
        restart: unless-stopped
        container_name: decider-db
        env_file: .env
        image: postgres:14-alpine
        environment:
            POSTGRES_INITDB_ARGS: '--auth=scram-sha-256'
            POSTGRES_HOST_AUTH_METHOD: 'scram-sha-256'
            POSTGRES_USER: ${DB_ADMIN_NAME}
            PGUSER: ${DB_ADMIN_NAME}
            POSTGRES_PASSWORD: ${DB_ADMIN_PASS}
            POSTGRES_DB: ${DB_DATABASE}
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U ${DB_ADMIN_NAME} -d ${DB_DATABASE}']
            interval: 4s
            timeout: 2s
            retries: 8
        volumes:
            - db_data:/var/lib/postgresql/data

volumes:
    db_data:
